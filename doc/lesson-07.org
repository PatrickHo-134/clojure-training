* Lesson 7: A simple HTTP service

 - [X] Simple HTTP service: ring handlers, libraries
 - [X] What is a request?  What is a response?
 - [X] Routing
 - [X] Middlewares
 - [X] A toy problem: Guess what number I'm thinking?

* Preparatory Material for Lesson 7

 - Read [[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol][Hypertext_Transfer_Protocol]], in particular the section on [[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Message_format][Message Format]]
   and the [[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Example_session][example session]].
 - Read https://github.com/ring-clojure/ring/wiki/Concepts
 - Read https://github.com/weavejester/compojure/wiki/Routes-In-Detail
 - checkout this repo: https://github.com/alain-picard/simple-server-playground
   and run it in your IDE, then visit http://localhost:3001

# Here is my [[file:~/Consulting/clients/gojee/work/simple-server/][local copy]]
   

* Lesson plan
** Discuss problem solutions --- see these points:
 - points?


** Things to explain
 - Go through each of the tags in the [[https://github.com/alain-picard/simple-server-playground][simple server playground]].
 - Outline of HTTP
 - The Ring model
 - building a simple app.
 - compojure and middleware
 - Idempotent functions, request methods, caching
 - Where's the state?

** Tags

 - starting-point
 - request-methods
 - manual-dispatching
 - compojure-routing
 - http-ring-responses
 - destructuring-routes
 - understanding-middlewares
 - using-middleware-and-destructured-routes
 - separation-of-concerns



* Assignments for Lesson 7

 - Clone the sample toy problem repository, and create a new branch (use your name).
   Add the following features to the code in your new branch:

   + Restrict the game so that the player is told she loses if she fails to
     guess the correct number in 5 guesses or less.

   + Add a "login" page where the user enters their name before being
     allowed to play the game.  Modify your test client so that this
     authorization is sent; the server should refuse to play the game
     if the authorization is not present.

   + Make the server be able to play multiple games, against multiple
     players, simultaneously.

   + If you are keeping any stateful information in the system (and you'll
     have to do do these features, make sure the functions to manipulate
     and inspect that state are abstracted away, so we can re-implement them
     using a database next class.

   + The current game uses the GET verb to play the game, but this is bad form
     for operations which modify state on the server (such as creating the game,
     recording number of attempts /etc./ because GET requests can be cached by 
     intermediate proxies.  What are more appropriate verbs to use in for the
     uris in this game?  Make the proper modification to the game.

 - Modify the README file to clearly indicate all urls, and how I'm supposed to
   proceed to play the game to verify your work.  Pretend I'm a naive user; this
   is an exercise in writing good documentation.


